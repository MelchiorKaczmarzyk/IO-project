@using IOProject.Models
@using IOProject.ViewModels
@using Microsoft.AspNetCore.Identity

@inject SignInManager<SystemUser> SignInManager
@inject UserManager<SystemUser> UserManager

<ul class="navbar-nav">
    <li class="nav-item">
        <a class="nav-link" id="View projects" asp-controller="HelpProjectsPrint" asp-action="Index">View projects</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" id="Search projects" asp-controller="HelpProjectsPrint" asp-action="ShowSearchForm">Search</a>
    </li>
    @if (SignInManager.IsSignedIn(User))
    {
        @if (User.IsInRole("Organisation") || User.IsInRole("Admin"))
        {
            <li class="nav-item">
                <a class="nav-link" id="Create project" asp-controller="HelpProject" asp-action="DesignProject">Create project</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="My projects" asp-controller="HelpProjectsPrint" asp-action="OrganisationProjects">My projects</a>
            </li>
        }
        @if (User.IsInRole("Beneficiary") || User.IsInRole("Admin"))
        {
            <li class="nav-item">
                <a class="nav-link" id="My applications" asp-controller="Applications" asp-action="MyApplications">My applications</a>
            </li>
        }
        @if (User.IsInRole("Benefactor") || User.IsInRole("Admin"))
        {
            <li class="nav-item">
                <a class="nav-link" id="My offers" asp-controller="HelpOffers" asp-action="MyOffers">My offers</a>
            </li>
        }
        <li class="nav-item">
            <a id="manage" class="nav-link" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">@UserManager.GetUserName(User)</a>
        </li>
        <li class="nav-item">
            <form id="logoutForm" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
                <button id="logout" type="submit" class="nav-link btn btn-link border-0">Logout</button>
            </form>
        </li>
    }
    else
    {
        <li class="nav-item">
            <a class="nav-link" id="register" asp-area="Identity" asp-page="/Account/Register">Register</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="login" asp-area="Identity" asp-page="/Account/Login">Login</a>
        </li>
    }

    <!-- Theme Switcher Dropdown -->
    <li class="nav-item dropdown">
        <a class="nav-link dropdown-toggle" href="#" id="themeDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
            Theme
        </a>
        <ul class="dropdown-menu" aria-labelledby="themeDropdown">
            <li><button class="dropdown-item" type="button" data-bs-theme-value="light">Light</button></li>
            <li><button class="dropdown-item" type="button" data-bs-theme-value="dark">Dark</button></li>
        </ul>
    </li>
    <!-- End Theme Switcher Dropdown -->

</ul>

<!-- Script from official boostrap website -->
<script>
    (() => {
        'use strict'

        const getStoredTheme = () => localStorage.getItem('theme')
        const setStoredTheme = theme => localStorage.setItem('theme', theme)

        const getPreferredTheme = () => {
            const storedTheme = getStoredTheme()
            if (storedTheme) {
                return storedTheme
            }

            return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
        }

        const setTheme = theme => {
            if (theme === 'auto' && window.matchMedia('(prefers-color-scheme: dark)').matches) {
                document.documentElement.setAttribute('data-bs-theme', 'dark')
            } else {
                document.documentElement.setAttribute('data-bs-theme', theme)
            }
        }

        setTheme(getPreferredTheme())

        const showActiveTheme = (theme, focus = false) => {
            const themeSwitcher = document.querySelector('#bd-theme')

            if (!themeSwitcher) {
                return
            }

            const themeSwitcherText = document.querySelector('#bd-theme-text')
            const activeThemeIcon = document.querySelector('.theme-icon-active use')
            const btnToActive = document.querySelector(`[data-bs-theme-value="${theme}"]`)
            const svgOfActiveBtn = btnToActive.querySelector('svg use').getAttribute('href')

            document.querySelectorAll('[data-bs-theme-value]').forEach(element => {
                element.classList.remove('active')
                element.setAttribute('aria-pressed', 'false')
            })

            btnToActive.classList.add('active')
            btnToActive.setAttribute('aria-pressed', 'true')
            activeThemeIcon.setAttribute('href', svgOfActiveBtn)
            const themeSwitcherLabel = `${themeSwitcherText.textContent} (${btnToActive.dataset.bsThemeValue})`
            themeSwitcher.setAttribute('aria-label', themeSwitcherLabel)

            if (focus) {
                themeSwitcher.focus()
            }
        }

        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
            const storedTheme = getStoredTheme()
            if (storedTheme !== 'light' && storedTheme !== 'dark') {
                setTheme(getPreferredTheme())
            }
        })

        window.addEventListener('DOMContentLoaded', () => {
            showActiveTheme(getPreferredTheme())

            document.querySelectorAll('[data-bs-theme-value]')
                .forEach(toggle => {
                    toggle.addEventListener('click', () => {
                        const theme = toggle.getAttribute('data-bs-theme-value')
                        setStoredTheme(theme)
                        setTheme(theme)
                        showActiveTheme(theme, true)
                    })
                })
        })
    })()
</script>